
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "StructureMC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('StructureMC')
Loading required package: MASS
Loading required package: matrixcalc
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("mynorm")
> ### * mynorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mynorm
> ### Title: mynorm
> ### Aliases: mynorm
> ### Keywords: structure matrix completion Genomic
> 
> ### ** Examples
> 
> A = matrix(rnorm(10, mean = 0, sd = 0.1), 10, 10)
> mynorm(A, "2")
[1] 0.752237
> mynorm(A, "O")
[1] 0.6497906
> 
> 
> 
> 
> cleanEx()
> nameEx("smc.FUN")
> ### * smc.FUN
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smc.FUN
> ### Title: Structured Matrix Completion
> ### Aliases: smc.FUN
> ### Keywords: structure matrix completion Genomic
> 
> ### ** Examples
> 
> ##dimension of matrix A with row number p1 = 10 and column number p2 = 9
> p1 = 10
> p2 = 9
> m1 = 6##row number of A11
> m2 = 3##column number of A11
> A = matrix(rnorm(10, mean = 0, sd = 0.1), p1, p2)
> ##find the approximation low-rank of A under singular value decomposition (SVD)
> j1 = svd(A)$d
> num<-length(which(j1!=0))
> j2 = svd(A)$u
> j3 = svd(A)$v
> D<-diag(j1)
> D[num, num] = 0
> app_low_rank_A = j2
> ##consturct the matrix Arecovery that need to be recovered
> A11 = app_low_rank_A[1:m1, 1:m2]
> A12 = app_low_rank_A[1:m1, (1+m2):p2]
> A21 = app_low_rank_A[(1+m1):p1, 1:m2]
> Arecovery = rbind(cbind(A11,A12),cbind(A21,matrix(NA,nrow=p1-m1,ncol=p2-m2)))
> ##recovery the block A22
> A22 = smc.FUN(Arecovery, 2, "True", m1, m2) 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.085 0.008 0.094 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
